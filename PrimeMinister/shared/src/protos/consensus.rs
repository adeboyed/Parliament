// This file is generated by rust-protobuf 2.0.5. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

#[derive(PartialEq,Clone,Default)]
pub struct Consensus {
    // message fields
    pub id: i32,
    pub ip: ::std::string::String,
    pub port: i32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Consensus {
    pub fn new() -> Consensus {
        ::std::default::Default::default()
    }

    // int32 id = 1;

    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    pub fn get_id(&self) -> i32 {
        self.id
    }

    // string ip = 2;

    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: ::std::string::String) {
        self.ip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut ::std::string::String {
        &mut self.ip
    }

    // Take field
    pub fn take_ip(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ip, ::std::string::String::new())
    }

    pub fn get_ip(&self) -> &str {
        &self.ip
    }

    // int32 port = 3;

    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = v;
    }

    pub fn get_port(&self) -> i32 {
        self.port
    }
}

impl ::protobuf::Message for Consensus {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ip)?;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.ip);
        }
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(3, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if !self.ip.is_empty() {
            os.write_string(2, &self.ip)?;
        }
        if self.port != 0 {
            os.write_int32(3, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Consensus {
        Consensus::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "id",
                    |m: &Consensus| { &m.id },
                    |m: &mut Consensus| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ip",
                    |m: &Consensus| { &m.ip },
                    |m: &mut Consensus| { &mut m.ip },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "port",
                    |m: &Consensus| { &m.port },
                    |m: &mut Consensus| { &mut m.port },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Consensus>(
                    "Consensus",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Consensus {
        static mut instance: ::protobuf::lazy::Lazy<Consensus> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Consensus,
        };
        unsafe {
            instance.get(Consensus::new)
        }
    }
}

impl ::protobuf::Clear for Consensus {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_ip();
        self.clear_port();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Consensus {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Consensus {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Master {
    // message fields
    pub id: i32,
    pub master: bool,
    pub ip: ::std::string::String,
    pub worker_port: i32,
    pub user_port: i32,
    pub active: bool,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl Master {
    pub fn new() -> Master {
        ::std::default::Default::default()
    }

    // int32 id = 1;

    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: i32) {
        self.id = v;
    }

    pub fn get_id(&self) -> i32 {
        self.id
    }

    // bool master = 2;

    pub fn clear_master(&mut self) {
        self.master = false;
    }

    // Param is passed by value, moved
    pub fn set_master(&mut self, v: bool) {
        self.master = v;
    }

    pub fn get_master(&self) -> bool {
        self.master
    }

    // string ip = 3;

    pub fn clear_ip(&mut self) {
        self.ip.clear();
    }

    // Param is passed by value, moved
    pub fn set_ip(&mut self, v: ::std::string::String) {
        self.ip = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ip(&mut self) -> &mut ::std::string::String {
        &mut self.ip
    }

    // Take field
    pub fn take_ip(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.ip, ::std::string::String::new())
    }

    pub fn get_ip(&self) -> &str {
        &self.ip
    }

    // int32 worker_port = 4;

    pub fn clear_worker_port(&mut self) {
        self.worker_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_worker_port(&mut self, v: i32) {
        self.worker_port = v;
    }

    pub fn get_worker_port(&self) -> i32 {
        self.worker_port
    }

    // int32 user_port = 5;

    pub fn clear_user_port(&mut self) {
        self.user_port = 0;
    }

    // Param is passed by value, moved
    pub fn set_user_port(&mut self, v: i32) {
        self.user_port = v;
    }

    pub fn get_user_port(&self) -> i32 {
        self.user_port
    }

    // bool active = 6;

    pub fn clear_active(&mut self) {
        self.active = false;
    }

    // Param is passed by value, moved
    pub fn set_active(&mut self, v: bool) {
        self.active = v;
    }

    pub fn get_active(&self) -> bool {
        self.active
    }
}

impl ::protobuf::Message for Master {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.master = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.ip)?;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.worker_port = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.user_port = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_bool()?;
                    self.active = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.master != false {
            my_size += 2;
        }
        if !self.ip.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ip);
        }
        if self.worker_port != 0 {
            my_size += ::protobuf::rt::value_size(4, self.worker_port, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.user_port != 0 {
            my_size += ::protobuf::rt::value_size(5, self.user_port, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.active != false {
            my_size += 2;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_int32(1, self.id)?;
        }
        if self.master != false {
            os.write_bool(2, self.master)?;
        }
        if !self.ip.is_empty() {
            os.write_string(3, &self.ip)?;
        }
        if self.worker_port != 0 {
            os.write_int32(4, self.worker_port)?;
        }
        if self.user_port != 0 {
            os.write_int32(5, self.user_port)?;
        }
        if self.active != false {
            os.write_bool(6, self.active)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Master {
        Master::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "id",
                    |m: &Master| { &m.id },
                    |m: &mut Master| { &mut m.id },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "master",
                    |m: &Master| { &m.master },
                    |m: &mut Master| { &mut m.master },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "ip",
                    |m: &Master| { &m.ip },
                    |m: &mut Master| { &mut m.ip },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "worker_port",
                    |m: &Master| { &m.worker_port },
                    |m: &mut Master| { &mut m.worker_port },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "user_port",
                    |m: &Master| { &m.user_port },
                    |m: &mut Master| { &mut m.user_port },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBool>(
                    "active",
                    |m: &Master| { &m.active },
                    |m: &mut Master| { &mut m.active },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Master>(
                    "Master",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Master {
        static mut instance: ::protobuf::lazy::Lazy<Master> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Master,
        };
        unsafe {
            instance.get(Master::new)
        }
    }
}

impl ::protobuf::Clear for Master {
    fn clear(&mut self) {
        self.clear_id();
        self.clear_master();
        self.clear_ip();
        self.clear_worker_port();
        self.clear_user_port();
        self.clear_active();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Master {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Master {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HeartbeatRequest {
    // message fields
    pub consensuses: ::protobuf::RepeatedField<Consensus>,
    pub masters: ::protobuf::RepeatedField<Master>,
    pub me: ::protobuf::SingularPtrField<Consensus>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl HeartbeatRequest {
    pub fn new() -> HeartbeatRequest {
        ::std::default::Default::default()
    }

    // repeated .Consensus consensuses = 1;

    pub fn clear_consensuses(&mut self) {
        self.consensuses.clear();
    }

    // Param is passed by value, moved
    pub fn set_consensuses(&mut self, v: ::protobuf::RepeatedField<Consensus>) {
        self.consensuses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_consensuses(&mut self) -> &mut ::protobuf::RepeatedField<Consensus> {
        &mut self.consensuses
    }

    // Take field
    pub fn take_consensuses(&mut self) -> ::protobuf::RepeatedField<Consensus> {
        ::std::mem::replace(&mut self.consensuses, ::protobuf::RepeatedField::new())
    }

    pub fn get_consensuses(&self) -> &[Consensus] {
        &self.consensuses
    }

    // repeated .Master masters = 2;

    pub fn clear_masters(&mut self) {
        self.masters.clear();
    }

    // Param is passed by value, moved
    pub fn set_masters(&mut self, v: ::protobuf::RepeatedField<Master>) {
        self.masters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_masters(&mut self) -> &mut ::protobuf::RepeatedField<Master> {
        &mut self.masters
    }

    // Take field
    pub fn take_masters(&mut self) -> ::protobuf::RepeatedField<Master> {
        ::std::mem::replace(&mut self.masters, ::protobuf::RepeatedField::new())
    }

    pub fn get_masters(&self) -> &[Master] {
        &self.masters
    }

    // .Consensus me = 3;

    pub fn clear_me(&mut self) {
        self.me.clear();
    }

    pub fn has_me(&self) -> bool {
        self.me.is_some()
    }

    // Param is passed by value, moved
    pub fn set_me(&mut self, v: Consensus) {
        self.me = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_me(&mut self) -> &mut Consensus {
        if self.me.is_none() {
            self.me.set_default();
        }
        self.me.as_mut().unwrap()
    }

    // Take field
    pub fn take_me(&mut self) -> Consensus {
        self.me.take().unwrap_or_else(|| Consensus::new())
    }

    pub fn get_me(&self) -> &Consensus {
        self.me.as_ref().unwrap_or_else(|| Consensus::default_instance())
    }
}

impl ::protobuf::Message for HeartbeatRequest {
    fn is_initialized(&self) -> bool {
        for v in &self.consensuses {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.masters {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.me {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.consensuses)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.masters)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.me)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.consensuses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.masters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if let Some(ref v) = self.me.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.consensuses {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.masters {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if let Some(ref v) = self.me.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeartbeatRequest {
        HeartbeatRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Consensus>>(
                    "consensuses",
                    |m: &HeartbeatRequest| { &m.consensuses },
                    |m: &mut HeartbeatRequest| { &mut m.consensuses },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Master>>(
                    "masters",
                    |m: &HeartbeatRequest| { &m.masters },
                    |m: &mut HeartbeatRequest| { &mut m.masters },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Consensus>>(
                    "me",
                    |m: &HeartbeatRequest| { &m.me },
                    |m: &mut HeartbeatRequest| { &mut m.me },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HeartbeatRequest>(
                    "HeartbeatRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HeartbeatRequest {
        static mut instance: ::protobuf::lazy::Lazy<HeartbeatRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HeartbeatRequest,
        };
        unsafe {
            instance.get(HeartbeatRequest::new)
        }
    }
}

impl ::protobuf::Clear for HeartbeatRequest {
    fn clear(&mut self) {
        self.clear_consensuses();
        self.clear_masters();
        self.clear_me();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HeartbeatRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeartbeatRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct HeartbeatResponse {
    // message fields
    pub consensuses: ::protobuf::RepeatedField<Consensus>,
    pub masters: ::protobuf::RepeatedField<Master>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl HeartbeatResponse {
    pub fn new() -> HeartbeatResponse {
        ::std::default::Default::default()
    }

    // repeated .Consensus consensuses = 1;

    pub fn clear_consensuses(&mut self) {
        self.consensuses.clear();
    }

    // Param is passed by value, moved
    pub fn set_consensuses(&mut self, v: ::protobuf::RepeatedField<Consensus>) {
        self.consensuses = v;
    }

    // Mutable pointer to the field.
    pub fn mut_consensuses(&mut self) -> &mut ::protobuf::RepeatedField<Consensus> {
        &mut self.consensuses
    }

    // Take field
    pub fn take_consensuses(&mut self) -> ::protobuf::RepeatedField<Consensus> {
        ::std::mem::replace(&mut self.consensuses, ::protobuf::RepeatedField::new())
    }

    pub fn get_consensuses(&self) -> &[Consensus] {
        &self.consensuses
    }

    // repeated .Master masters = 2;

    pub fn clear_masters(&mut self) {
        self.masters.clear();
    }

    // Param is passed by value, moved
    pub fn set_masters(&mut self, v: ::protobuf::RepeatedField<Master>) {
        self.masters = v;
    }

    // Mutable pointer to the field.
    pub fn mut_masters(&mut self) -> &mut ::protobuf::RepeatedField<Master> {
        &mut self.masters
    }

    // Take field
    pub fn take_masters(&mut self) -> ::protobuf::RepeatedField<Master> {
        ::std::mem::replace(&mut self.masters, ::protobuf::RepeatedField::new())
    }

    pub fn get_masters(&self) -> &[Master] {
        &self.masters
    }
}

impl ::protobuf::Message for HeartbeatResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.consensuses {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.masters {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.consensuses)?;
                },
                2 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.masters)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.consensuses {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        for value in &self.masters {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        for v in &self.consensuses {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        for v in &self.masters {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> HeartbeatResponse {
        HeartbeatResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Consensus>>(
                    "consensuses",
                    |m: &HeartbeatResponse| { &m.consensuses },
                    |m: &mut HeartbeatResponse| { &mut m.consensuses },
                ));
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<Master>>(
                    "masters",
                    |m: &HeartbeatResponse| { &m.masters },
                    |m: &mut HeartbeatResponse| { &mut m.masters },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<HeartbeatResponse>(
                    "HeartbeatResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static HeartbeatResponse {
        static mut instance: ::protobuf::lazy::Lazy<HeartbeatResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const HeartbeatResponse,
        };
        unsafe {
            instance.get(HeartbeatResponse::new)
        }
    }
}

impl ::protobuf::Clear for HeartbeatResponse {
    fn clear(&mut self) {
        self.clear_consensuses();
        self.clear_masters();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for HeartbeatResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for HeartbeatResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LeaderConnectionRequest {
    // message fields
    pub port: i32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl LeaderConnectionRequest {
    pub fn new() -> LeaderConnectionRequest {
        ::std::default::Default::default()
    }

    // int32 port = 1;

    pub fn clear_port(&mut self) {
        self.port = 0;
    }

    // Param is passed by value, moved
    pub fn set_port(&mut self, v: i32) {
        self.port = v;
    }

    pub fn get_port(&self) -> i32 {
        self.port
    }
}

impl ::protobuf::Message for LeaderConnectionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.port = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.port != 0 {
            my_size += ::protobuf::rt::value_size(1, self.port, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.port != 0 {
            os.write_int32(1, self.port)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LeaderConnectionRequest {
        LeaderConnectionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "port",
                    |m: &LeaderConnectionRequest| { &m.port },
                    |m: &mut LeaderConnectionRequest| { &mut m.port },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LeaderConnectionRequest>(
                    "LeaderConnectionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LeaderConnectionRequest {
        static mut instance: ::protobuf::lazy::Lazy<LeaderConnectionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LeaderConnectionRequest,
        };
        unsafe {
            instance.get(LeaderConnectionRequest::new)
        }
    }
}

impl ::protobuf::Clear for LeaderConnectionRequest {
    fn clear(&mut self) {
        self.clear_port();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LeaderConnectionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaderConnectionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct LeaderConnectionResponse {
    // message fields
    pub consensus_id: i32,
    pub heartbeat_response: ::protobuf::SingularPtrField<HeartbeatResponse>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl LeaderConnectionResponse {
    pub fn new() -> LeaderConnectionResponse {
        ::std::default::Default::default()
    }

    // int32 consensus_id = 1;

    pub fn clear_consensus_id(&mut self) {
        self.consensus_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_consensus_id(&mut self, v: i32) {
        self.consensus_id = v;
    }

    pub fn get_consensus_id(&self) -> i32 {
        self.consensus_id
    }

    // .HeartbeatResponse heartbeat_response = 2;

    pub fn clear_heartbeat_response(&mut self) {
        self.heartbeat_response.clear();
    }

    pub fn has_heartbeat_response(&self) -> bool {
        self.heartbeat_response.is_some()
    }

    // Param is passed by value, moved
    pub fn set_heartbeat_response(&mut self, v: HeartbeatResponse) {
        self.heartbeat_response = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_heartbeat_response(&mut self) -> &mut HeartbeatResponse {
        if self.heartbeat_response.is_none() {
            self.heartbeat_response.set_default();
        }
        self.heartbeat_response.as_mut().unwrap()
    }

    // Take field
    pub fn take_heartbeat_response(&mut self) -> HeartbeatResponse {
        self.heartbeat_response.take().unwrap_or_else(|| HeartbeatResponse::new())
    }

    pub fn get_heartbeat_response(&self) -> &HeartbeatResponse {
        self.heartbeat_response.as_ref().unwrap_or_else(|| HeartbeatResponse::default_instance())
    }
}

impl ::protobuf::Message for LeaderConnectionResponse {
    fn is_initialized(&self) -> bool {
        for v in &self.heartbeat_response {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.consensus_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.heartbeat_response)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.consensus_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.consensus_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.heartbeat_response.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.consensus_id != 0 {
            os.write_int32(1, self.consensus_id)?;
        }
        if let Some(ref v) = self.heartbeat_response.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> LeaderConnectionResponse {
        LeaderConnectionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "consensus_id",
                    |m: &LeaderConnectionResponse| { &m.consensus_id },
                    |m: &mut LeaderConnectionResponse| { &mut m.consensus_id },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<HeartbeatResponse>>(
                    "heartbeat_response",
                    |m: &LeaderConnectionResponse| { &m.heartbeat_response },
                    |m: &mut LeaderConnectionResponse| { &mut m.heartbeat_response },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<LeaderConnectionResponse>(
                    "LeaderConnectionResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static LeaderConnectionResponse {
        static mut instance: ::protobuf::lazy::Lazy<LeaderConnectionResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const LeaderConnectionResponse,
        };
        unsafe {
            instance.get(LeaderConnectionResponse::new)
        }
    }
}

impl ::protobuf::Clear for LeaderConnectionResponse {
    fn clear(&mut self) {
        self.clear_consensus_id();
        self.clear_heartbeat_response();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for LeaderConnectionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LeaderConnectionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConflictingActionRequest {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ConflictingActionRequest {
    pub fn new() -> ConflictingActionRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for ConflictingActionRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConflictingActionRequest {
        ConflictingActionRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<ConflictingActionRequest>(
                    "ConflictingActionRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConflictingActionRequest {
        static mut instance: ::protobuf::lazy::Lazy<ConflictingActionRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConflictingActionRequest,
        };
        unsafe {
            instance.get(ConflictingActionRequest::new)
        }
    }
}

impl ::protobuf::Clear for ConflictingActionRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConflictingActionRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConflictingActionRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ConflictingActionResponse {
    // message fields
    pub id: u32,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl ConflictingActionResponse {
    pub fn new() -> ConflictingActionResponse {
        ::std::default::Default::default()
    }

    // uint32 id = 1;

    pub fn clear_id(&mut self) {
        self.id = 0;
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: u32) {
        self.id = v;
    }

    pub fn get_id(&self) -> u32 {
        self.id
    }
}

impl ::protobuf::Message for ConflictingActionResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.id != 0 {
            os.write_uint32(1, self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ConflictingActionResponse {
        ConflictingActionResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                    "id",
                    |m: &ConflictingActionResponse| { &m.id },
                    |m: &mut ConflictingActionResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<ConflictingActionResponse>(
                    "ConflictingActionResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ConflictingActionResponse {
        static mut instance: ::protobuf::lazy::Lazy<ConflictingActionResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ConflictingActionResponse,
        };
        unsafe {
            instance.get(ConflictingActionResponse::new)
        }
    }
}

impl ::protobuf::Clear for ConflictingActionResponse {
    fn clear(&mut self) {
        self.clear_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ConflictingActionResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ConflictingActionResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UniqueIdRequest {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl UniqueIdRequest {
    pub fn new() -> UniqueIdRequest {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for UniqueIdRequest {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UniqueIdRequest {
        UniqueIdRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<UniqueIdRequest>(
                    "UniqueIdRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UniqueIdRequest {
        static mut instance: ::protobuf::lazy::Lazy<UniqueIdRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UniqueIdRequest,
        };
        unsafe {
            instance.get(UniqueIdRequest::new)
        }
    }
}

impl ::protobuf::Clear for UniqueIdRequest {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UniqueIdRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UniqueIdRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct UniqueIdResponse {
    // message fields
    pub id: ::std::string::String,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl UniqueIdResponse {
    pub fn new() -> UniqueIdResponse {
        ::std::default::Default::default()
    }

    // string id = 1;

    pub fn clear_id(&mut self) {
        self.id.clear();
    }

    // Param is passed by value, moved
    pub fn set_id(&mut self, v: ::std::string::String) {
        self.id = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_id(&mut self) -> &mut ::std::string::String {
        &mut self.id
    }

    // Take field
    pub fn take_id(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.id, ::std::string::String::new())
    }

    pub fn get_id(&self) -> &str {
        &self.id
    }
}

impl ::protobuf::Message for UniqueIdResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.id)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.id.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.id);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if !self.id.is_empty() {
            os.write_string(1, &self.id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> UniqueIdResponse {
        UniqueIdResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "id",
                    |m: &UniqueIdResponse| { &m.id },
                    |m: &mut UniqueIdResponse| { &mut m.id },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<UniqueIdResponse>(
                    "UniqueIdResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static UniqueIdResponse {
        static mut instance: ::protobuf::lazy::Lazy<UniqueIdResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const UniqueIdResponse,
        };
        unsafe {
            instance.get(UniqueIdResponse::new)
        }
    }
}

impl ::protobuf::Clear for UniqueIdResponse {
    fn clear(&mut self) {
        self.clear_id();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for UniqueIdResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for UniqueIdResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct NotLeaderResponse {
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

impl NotLeaderResponse {
    pub fn new() -> NotLeaderResponse {
        ::std::default::Default::default()
    }
}

impl ::protobuf::Message for NotLeaderResponse {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> NotLeaderResponse {
        NotLeaderResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let fields = ::std::vec::Vec::new();
                ::protobuf::reflect::MessageDescriptor::new::<NotLeaderResponse>(
                    "NotLeaderResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static NotLeaderResponse {
        static mut instance: ::protobuf::lazy::Lazy<NotLeaderResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const NotLeaderResponse,
        };
        unsafe {
            instance.get(NotLeaderResponse::new)
        }
    }
}

impl ::protobuf::Clear for NotLeaderResponse {
    fn clear(&mut self) {
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for NotLeaderResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for NotLeaderResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SingleConsensusRequest {
    // message oneof groups
    pub request: ::std::option::Option<SingleConsensusRequest_oneof_request>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum SingleConsensusRequest_oneof_request {
    leader_connection_request(LeaderConnectionRequest),
    heartbeat_request(HeartbeatRequest),
    conflicting_action_request(ConflictingActionRequest),
    unique_id_request(UniqueIdRequest),
}

impl SingleConsensusRequest {
    pub fn new() -> SingleConsensusRequest {
        ::std::default::Default::default()
    }

    // .LeaderConnectionRequest leader_connection_request = 1;

    pub fn clear_leader_connection_request(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_leader_connection_request(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(SingleConsensusRequest_oneof_request::leader_connection_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_leader_connection_request(&mut self, v: LeaderConnectionRequest) {
        self.request = ::std::option::Option::Some(SingleConsensusRequest_oneof_request::leader_connection_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_leader_connection_request(&mut self) -> &mut LeaderConnectionRequest {
        if let ::std::option::Option::Some(SingleConsensusRequest_oneof_request::leader_connection_request(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(SingleConsensusRequest_oneof_request::leader_connection_request(LeaderConnectionRequest::new()));
        }
        match self.request {
            ::std::option::Option::Some(SingleConsensusRequest_oneof_request::leader_connection_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_leader_connection_request(&mut self) -> LeaderConnectionRequest {
        if self.has_leader_connection_request() {
            match self.request.take() {
                ::std::option::Option::Some(SingleConsensusRequest_oneof_request::leader_connection_request(v)) => v,
                _ => panic!(),
            }
        } else {
            LeaderConnectionRequest::new()
        }
    }

    pub fn get_leader_connection_request(&self) -> &LeaderConnectionRequest {
        match self.request {
            ::std::option::Option::Some(SingleConsensusRequest_oneof_request::leader_connection_request(ref v)) => v,
            _ => LeaderConnectionRequest::default_instance(),
        }
    }

    // .HeartbeatRequest heartbeat_request = 2;

    pub fn clear_heartbeat_request(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_heartbeat_request(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(SingleConsensusRequest_oneof_request::heartbeat_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_heartbeat_request(&mut self, v: HeartbeatRequest) {
        self.request = ::std::option::Option::Some(SingleConsensusRequest_oneof_request::heartbeat_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_heartbeat_request(&mut self) -> &mut HeartbeatRequest {
        if let ::std::option::Option::Some(SingleConsensusRequest_oneof_request::heartbeat_request(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(SingleConsensusRequest_oneof_request::heartbeat_request(HeartbeatRequest::new()));
        }
        match self.request {
            ::std::option::Option::Some(SingleConsensusRequest_oneof_request::heartbeat_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_heartbeat_request(&mut self) -> HeartbeatRequest {
        if self.has_heartbeat_request() {
            match self.request.take() {
                ::std::option::Option::Some(SingleConsensusRequest_oneof_request::heartbeat_request(v)) => v,
                _ => panic!(),
            }
        } else {
            HeartbeatRequest::new()
        }
    }

    pub fn get_heartbeat_request(&self) -> &HeartbeatRequest {
        match self.request {
            ::std::option::Option::Some(SingleConsensusRequest_oneof_request::heartbeat_request(ref v)) => v,
            _ => HeartbeatRequest::default_instance(),
        }
    }

    // .ConflictingActionRequest conflicting_action_request = 3;

    pub fn clear_conflicting_action_request(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_conflicting_action_request(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(SingleConsensusRequest_oneof_request::conflicting_action_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_conflicting_action_request(&mut self, v: ConflictingActionRequest) {
        self.request = ::std::option::Option::Some(SingleConsensusRequest_oneof_request::conflicting_action_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_conflicting_action_request(&mut self) -> &mut ConflictingActionRequest {
        if let ::std::option::Option::Some(SingleConsensusRequest_oneof_request::conflicting_action_request(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(SingleConsensusRequest_oneof_request::conflicting_action_request(ConflictingActionRequest::new()));
        }
        match self.request {
            ::std::option::Option::Some(SingleConsensusRequest_oneof_request::conflicting_action_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_conflicting_action_request(&mut self) -> ConflictingActionRequest {
        if self.has_conflicting_action_request() {
            match self.request.take() {
                ::std::option::Option::Some(SingleConsensusRequest_oneof_request::conflicting_action_request(v)) => v,
                _ => panic!(),
            }
        } else {
            ConflictingActionRequest::new()
        }
    }

    pub fn get_conflicting_action_request(&self) -> &ConflictingActionRequest {
        match self.request {
            ::std::option::Option::Some(SingleConsensusRequest_oneof_request::conflicting_action_request(ref v)) => v,
            _ => ConflictingActionRequest::default_instance(),
        }
    }

    // .UniqueIdRequest unique_id_request = 4;

    pub fn clear_unique_id_request(&mut self) {
        self.request = ::std::option::Option::None;
    }

    pub fn has_unique_id_request(&self) -> bool {
        match self.request {
            ::std::option::Option::Some(SingleConsensusRequest_oneof_request::unique_id_request(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unique_id_request(&mut self, v: UniqueIdRequest) {
        self.request = ::std::option::Option::Some(SingleConsensusRequest_oneof_request::unique_id_request(v))
    }

    // Mutable pointer to the field.
    pub fn mut_unique_id_request(&mut self) -> &mut UniqueIdRequest {
        if let ::std::option::Option::Some(SingleConsensusRequest_oneof_request::unique_id_request(_)) = self.request {
        } else {
            self.request = ::std::option::Option::Some(SingleConsensusRequest_oneof_request::unique_id_request(UniqueIdRequest::new()));
        }
        match self.request {
            ::std::option::Option::Some(SingleConsensusRequest_oneof_request::unique_id_request(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_unique_id_request(&mut self) -> UniqueIdRequest {
        if self.has_unique_id_request() {
            match self.request.take() {
                ::std::option::Option::Some(SingleConsensusRequest_oneof_request::unique_id_request(v)) => v,
                _ => panic!(),
            }
        } else {
            UniqueIdRequest::new()
        }
    }

    pub fn get_unique_id_request(&self) -> &UniqueIdRequest {
        match self.request {
            ::std::option::Option::Some(SingleConsensusRequest_oneof_request::unique_id_request(ref v)) => v,
            _ => UniqueIdRequest::default_instance(),
        }
    }
}

impl ::protobuf::Message for SingleConsensusRequest {
    fn is_initialized(&self) -> bool {
        if let Some(SingleConsensusRequest_oneof_request::leader_connection_request(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SingleConsensusRequest_oneof_request::heartbeat_request(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SingleConsensusRequest_oneof_request::conflicting_action_request(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SingleConsensusRequest_oneof_request::unique_id_request(ref v)) = self.request {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(SingleConsensusRequest_oneof_request::leader_connection_request(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(SingleConsensusRequest_oneof_request::heartbeat_request(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(SingleConsensusRequest_oneof_request::conflicting_action_request(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.request = ::std::option::Option::Some(SingleConsensusRequest_oneof_request::unique_id_request(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &SingleConsensusRequest_oneof_request::leader_connection_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SingleConsensusRequest_oneof_request::heartbeat_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SingleConsensusRequest_oneof_request::conflicting_action_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SingleConsensusRequest_oneof_request::unique_id_request(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.request {
            match v {
                &SingleConsensusRequest_oneof_request::leader_connection_request(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SingleConsensusRequest_oneof_request::heartbeat_request(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SingleConsensusRequest_oneof_request::conflicting_action_request(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SingleConsensusRequest_oneof_request::unique_id_request(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SingleConsensusRequest {
        SingleConsensusRequest::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LeaderConnectionRequest>(
                    "leader_connection_request",
                    SingleConsensusRequest::has_leader_connection_request,
                    SingleConsensusRequest::get_leader_connection_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HeartbeatRequest>(
                    "heartbeat_request",
                    SingleConsensusRequest::has_heartbeat_request,
                    SingleConsensusRequest::get_heartbeat_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ConflictingActionRequest>(
                    "conflicting_action_request",
                    SingleConsensusRequest::has_conflicting_action_request,
                    SingleConsensusRequest::get_conflicting_action_request,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, UniqueIdRequest>(
                    "unique_id_request",
                    SingleConsensusRequest::has_unique_id_request,
                    SingleConsensusRequest::get_unique_id_request,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SingleConsensusRequest>(
                    "SingleConsensusRequest",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SingleConsensusRequest {
        static mut instance: ::protobuf::lazy::Lazy<SingleConsensusRequest> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SingleConsensusRequest,
        };
        unsafe {
            instance.get(SingleConsensusRequest::new)
        }
    }
}

impl ::protobuf::Clear for SingleConsensusRequest {
    fn clear(&mut self) {
        self.clear_leader_connection_request();
        self.clear_heartbeat_request();
        self.clear_conflicting_action_request();
        self.clear_unique_id_request();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SingleConsensusRequest {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SingleConsensusRequest {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct SingleConsensusResponse {
    // message oneof groups
    pub response: ::std::option::Option<SingleConsensusResponse_oneof_response>,
    // special fields
    unknown_fields: ::protobuf::UnknownFields,
    cached_size: ::protobuf::CachedSize,
}

#[derive(Clone,PartialEq)]
pub enum SingleConsensusResponse_oneof_response {
    leader_connection_response(LeaderConnectionResponse),
    heartbeat_response(HeartbeatResponse),
    conflicting_action_response(ConflictingActionResponse),
    not_leader_response(NotLeaderResponse),
    unique_id_response(UniqueIdResponse),
}

impl SingleConsensusResponse {
    pub fn new() -> SingleConsensusResponse {
        ::std::default::Default::default()
    }

    // .LeaderConnectionResponse leader_connection_response = 1;

    pub fn clear_leader_connection_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_leader_connection_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::leader_connection_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_leader_connection_response(&mut self, v: LeaderConnectionResponse) {
        self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::leader_connection_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_leader_connection_response(&mut self) -> &mut LeaderConnectionResponse {
        if let ::std::option::Option::Some(SingleConsensusResponse_oneof_response::leader_connection_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::leader_connection_response(LeaderConnectionResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::leader_connection_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_leader_connection_response(&mut self) -> LeaderConnectionResponse {
        if self.has_leader_connection_response() {
            match self.response.take() {
                ::std::option::Option::Some(SingleConsensusResponse_oneof_response::leader_connection_response(v)) => v,
                _ => panic!(),
            }
        } else {
            LeaderConnectionResponse::new()
        }
    }

    pub fn get_leader_connection_response(&self) -> &LeaderConnectionResponse {
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::leader_connection_response(ref v)) => v,
            _ => LeaderConnectionResponse::default_instance(),
        }
    }

    // .HeartbeatResponse heartbeat_response = 2;

    pub fn clear_heartbeat_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_heartbeat_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::heartbeat_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_heartbeat_response(&mut self, v: HeartbeatResponse) {
        self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::heartbeat_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_heartbeat_response(&mut self) -> &mut HeartbeatResponse {
        if let ::std::option::Option::Some(SingleConsensusResponse_oneof_response::heartbeat_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::heartbeat_response(HeartbeatResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::heartbeat_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_heartbeat_response(&mut self) -> HeartbeatResponse {
        if self.has_heartbeat_response() {
            match self.response.take() {
                ::std::option::Option::Some(SingleConsensusResponse_oneof_response::heartbeat_response(v)) => v,
                _ => panic!(),
            }
        } else {
            HeartbeatResponse::new()
        }
    }

    pub fn get_heartbeat_response(&self) -> &HeartbeatResponse {
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::heartbeat_response(ref v)) => v,
            _ => HeartbeatResponse::default_instance(),
        }
    }

    // .ConflictingActionResponse conflicting_action_response = 3;

    pub fn clear_conflicting_action_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_conflicting_action_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::conflicting_action_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_conflicting_action_response(&mut self, v: ConflictingActionResponse) {
        self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::conflicting_action_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_conflicting_action_response(&mut self) -> &mut ConflictingActionResponse {
        if let ::std::option::Option::Some(SingleConsensusResponse_oneof_response::conflicting_action_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::conflicting_action_response(ConflictingActionResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::conflicting_action_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_conflicting_action_response(&mut self) -> ConflictingActionResponse {
        if self.has_conflicting_action_response() {
            match self.response.take() {
                ::std::option::Option::Some(SingleConsensusResponse_oneof_response::conflicting_action_response(v)) => v,
                _ => panic!(),
            }
        } else {
            ConflictingActionResponse::new()
        }
    }

    pub fn get_conflicting_action_response(&self) -> &ConflictingActionResponse {
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::conflicting_action_response(ref v)) => v,
            _ => ConflictingActionResponse::default_instance(),
        }
    }

    // .NotLeaderResponse not_leader_response = 4;

    pub fn clear_not_leader_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_not_leader_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::not_leader_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_not_leader_response(&mut self, v: NotLeaderResponse) {
        self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::not_leader_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_not_leader_response(&mut self) -> &mut NotLeaderResponse {
        if let ::std::option::Option::Some(SingleConsensusResponse_oneof_response::not_leader_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::not_leader_response(NotLeaderResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::not_leader_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_not_leader_response(&mut self) -> NotLeaderResponse {
        if self.has_not_leader_response() {
            match self.response.take() {
                ::std::option::Option::Some(SingleConsensusResponse_oneof_response::not_leader_response(v)) => v,
                _ => panic!(),
            }
        } else {
            NotLeaderResponse::new()
        }
    }

    pub fn get_not_leader_response(&self) -> &NotLeaderResponse {
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::not_leader_response(ref v)) => v,
            _ => NotLeaderResponse::default_instance(),
        }
    }

    // .UniqueIdResponse unique_id_response = 5;

    pub fn clear_unique_id_response(&mut self) {
        self.response = ::std::option::Option::None;
    }

    pub fn has_unique_id_response(&self) -> bool {
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::unique_id_response(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_unique_id_response(&mut self, v: UniqueIdResponse) {
        self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::unique_id_response(v))
    }

    // Mutable pointer to the field.
    pub fn mut_unique_id_response(&mut self) -> &mut UniqueIdResponse {
        if let ::std::option::Option::Some(SingleConsensusResponse_oneof_response::unique_id_response(_)) = self.response {
        } else {
            self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::unique_id_response(UniqueIdResponse::new()));
        }
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::unique_id_response(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_unique_id_response(&mut self) -> UniqueIdResponse {
        if self.has_unique_id_response() {
            match self.response.take() {
                ::std::option::Option::Some(SingleConsensusResponse_oneof_response::unique_id_response(v)) => v,
                _ => panic!(),
            }
        } else {
            UniqueIdResponse::new()
        }
    }

    pub fn get_unique_id_response(&self) -> &UniqueIdResponse {
        match self.response {
            ::std::option::Option::Some(SingleConsensusResponse_oneof_response::unique_id_response(ref v)) => v,
            _ => UniqueIdResponse::default_instance(),
        }
    }
}

impl ::protobuf::Message for SingleConsensusResponse {
    fn is_initialized(&self) -> bool {
        if let Some(SingleConsensusResponse_oneof_response::leader_connection_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SingleConsensusResponse_oneof_response::heartbeat_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SingleConsensusResponse_oneof_response::conflicting_action_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SingleConsensusResponse_oneof_response::not_leader_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        if let Some(SingleConsensusResponse_oneof_response::unique_id_response(ref v)) = self.response {
            if !v.is_initialized() {
                return false;
            }
        }
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::leader_connection_response(is.read_message()?));
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::heartbeat_response(is.read_message()?));
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::conflicting_action_response(is.read_message()?));
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::not_leader_response(is.read_message()?));
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeLengthDelimited {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    self.response = ::std::option::Option::Some(SingleConsensusResponse_oneof_response::unique_id_response(is.read_message()?));
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &SingleConsensusResponse_oneof_response::leader_connection_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SingleConsensusResponse_oneof_response::heartbeat_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SingleConsensusResponse_oneof_response::conflicting_action_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SingleConsensusResponse_oneof_response::not_leader_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
                &SingleConsensusResponse_oneof_response::unique_id_response(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if let ::std::option::Option::Some(ref v) = self.response {
            match v {
                &SingleConsensusResponse_oneof_response::leader_connection_response(ref v) => {
                    os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SingleConsensusResponse_oneof_response::heartbeat_response(ref v) => {
                    os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SingleConsensusResponse_oneof_response::conflicting_action_response(ref v) => {
                    os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SingleConsensusResponse_oneof_response::not_leader_response(ref v) => {
                    os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
                &SingleConsensusResponse_oneof_response::unique_id_response(ref v) => {
                    os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
                    os.write_raw_varint32(v.get_cached_size())?;
                    v.write_to_with_cached_sizes(os)?;
                },
            };
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &::std::any::Any {
        self as &::std::any::Any
    }
    fn as_any_mut(&mut self) -> &mut ::std::any::Any {
        self as &mut ::std::any::Any
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<::std::any::Any> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SingleConsensusResponse {
        SingleConsensusResponse::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, LeaderConnectionResponse>(
                    "leader_connection_response",
                    SingleConsensusResponse::has_leader_connection_response,
                    SingleConsensusResponse::get_leader_connection_response,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, HeartbeatResponse>(
                    "heartbeat_response",
                    SingleConsensusResponse::has_heartbeat_response,
                    SingleConsensusResponse::get_heartbeat_response,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, ConflictingActionResponse>(
                    "conflicting_action_response",
                    SingleConsensusResponse::has_conflicting_action_response,
                    SingleConsensusResponse::get_conflicting_action_response,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, NotLeaderResponse>(
                    "not_leader_response",
                    SingleConsensusResponse::has_not_leader_response,
                    SingleConsensusResponse::get_not_leader_response,
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_message_accessor::<_, UniqueIdResponse>(
                    "unique_id_response",
                    SingleConsensusResponse::has_unique_id_response,
                    SingleConsensusResponse::get_unique_id_response,
                ));
                ::protobuf::reflect::MessageDescriptor::new::<SingleConsensusResponse>(
                    "SingleConsensusResponse",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SingleConsensusResponse {
        static mut instance: ::protobuf::lazy::Lazy<SingleConsensusResponse> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const SingleConsensusResponse,
        };
        unsafe {
            instance.get(SingleConsensusResponse::new)
        }
    }
}

impl ::protobuf::Clear for SingleConsensusResponse {
    fn clear(&mut self) {
        self.clear_leader_connection_response();
        self.clear_heartbeat_response();
        self.clear_conflicting_action_response();
        self.clear_not_leader_response();
        self.clear_unique_id_response();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SingleConsensusResponse {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SingleConsensusResponse {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0fconsensus.proto\"?\n\tConsensus\x12\x0e\n\x02id\x18\x01\x20\x01(\
    \x05R\x02id\x12\x0e\n\x02ip\x18\x02\x20\x01(\tR\x02ip\x12\x12\n\x04port\
    \x18\x03\x20\x01(\x05R\x04port\"\x96\x01\n\x06Master\x12\x0e\n\x02id\x18\
    \x01\x20\x01(\x05R\x02id\x12\x16\n\x06master\x18\x02\x20\x01(\x08R\x06ma\
    ster\x12\x0e\n\x02ip\x18\x03\x20\x01(\tR\x02ip\x12\x1f\n\x0bworker_port\
    \x18\x04\x20\x01(\x05R\nworkerPort\x12\x1b\n\tuser_port\x18\x05\x20\x01(\
    \x05R\x08userPort\x12\x16\n\x06active\x18\x06\x20\x01(\x08R\x06active\"\
    \x7f\n\x10HeartbeatRequest\x12,\n\x0bconsensuses\x18\x01\x20\x03(\x0b2\n\
    .ConsensusR\x0bconsensuses\x12!\n\x07masters\x18\x02\x20\x03(\x0b2\x07.M\
    asterR\x07masters\x12\x1a\n\x02me\x18\x03\x20\x01(\x0b2\n.ConsensusR\x02\
    me\"d\n\x11HeartbeatResponse\x12,\n\x0bconsensuses\x18\x01\x20\x03(\x0b2\
    \n.ConsensusR\x0bconsensuses\x12!\n\x07masters\x18\x02\x20\x03(\x0b2\x07\
    .MasterR\x07masters\"-\n\x17LeaderConnectionRequest\x12\x12\n\x04port\
    \x18\x01\x20\x01(\x05R\x04port\"\x80\x01\n\x18LeaderConnectionResponse\
    \x12!\n\x0cconsensus_id\x18\x01\x20\x01(\x05R\x0bconsensusId\x12A\n\x12h\
    eartbeat_response\x18\x02\x20\x01(\x0b2\x12.HeartbeatResponseR\x11heartb\
    eatResponse\"\x1a\n\x18ConflictingActionRequest\"+\n\x19ConflictingActio\
    nResponse\x12\x0e\n\x02id\x18\x01\x20\x01(\rR\x02id\"\x11\n\x0fUniqueIdR\
    equest\"\"\n\x10UniqueIdResponse\x12\x0e\n\x02id\x18\x01\x20\x01(\tR\x02\
    id\"\x13\n\x11NotLeaderResponse\"\xd8\x02\n\x16SingleConsensusRequest\
    \x12V\n\x19leader_connection_request\x18\x01\x20\x01(\x0b2\x18.LeaderCon\
    nectionRequestH\0R\x17leaderConnectionRequest\x12@\n\x11heartbeat_reques\
    t\x18\x02\x20\x01(\x0b2\x11.HeartbeatRequestH\0R\x10heartbeatRequest\x12\
    Y\n\x1aconflicting_action_request\x18\x03\x20\x01(\x0b2\x19.ConflictingA\
    ctionRequestH\0R\x18conflictingActionRequest\x12>\n\x11unique_id_request\
    \x18\x04\x20\x01(\x0b2\x10.UniqueIdRequestH\0R\x0funiqueIdRequestB\t\n\
    \x07request\"\xac\x03\n\x17SingleConsensusResponse\x12Y\n\x1aleader_conn\
    ection_response\x18\x01\x20\x01(\x0b2\x19.LeaderConnectionResponseH\0R\
    \x18leaderConnectionResponse\x12C\n\x12heartbeat_response\x18\x02\x20\
    \x01(\x0b2\x12.HeartbeatResponseH\0R\x11heartbeatResponse\x12\\\n\x1bcon\
    flicting_action_response\x18\x03\x20\x01(\x0b2\x1a.ConflictingActionResp\
    onseH\0R\x19conflictingActionResponse\x12D\n\x13not_leader_response\x18\
    \x04\x20\x01(\x0b2\x12.NotLeaderResponseH\0R\x11notLeaderResponse\x12A\n\
    \x12unique_id_response\x18\x05\x20\x01(\x0b2\x11.UniqueIdResponseH\0R\
    \x10uniqueIdResponseB\n\n\x08responseb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
